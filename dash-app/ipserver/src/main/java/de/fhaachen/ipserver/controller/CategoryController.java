package de.fhaachen.ipserver.controller;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;

import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;

import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.bind.annotation.RestController;

import de.fhaachen.ipserver.model.Category;
import de.fhaachen.ipserver.repository.CategoryRepository;

@Controller
@CrossOrigin(origins = "*")
@RequestMapping(path = "/category") // This means URL's start with /demo (after Application path)
public class CategoryController {
	@Autowired // This means to get the bean called CategoryRepository
				// Which is auto-generated by Spring, we will use it to handle the data
	private CategoryRepository categoryRepository;

	@GetMapping(path = "/all")
	public @ResponseBody Iterable<Category> getAllCategories() {
		System.out.println("Get all Categories...");
		// This returns a JSON or XML with the categories
		return categoryRepository.findAll();
	}

	@GetMapping(path = "/detail")
	public @ResponseBody Category getCategory(@RequestParam int id) {
		System.out.println("Get Category with ID: " + id);
		// This returns a JSON or XML with the categories
		return categoryRepository.findById(id).get();
	}

	@GetMapping(path = "/add") // Map ONLY GET Requests
	public @ResponseBody String addNewCategory(@RequestParam String name) {
		// @ResponseBody means the returned String is the response, not a view name
		// @RequestParam means it is a parameter from the GET or POST request

		Category n = new Category();
		n.setName(name);
		categoryRepository.save(n);
		return "Saved";
	}

	@GetMapping(path = "/delete") // Map ONLY GET Requests
	public @ResponseBody String deleteCategory(@RequestParam int id) {
		if (categoryRepository.existsById(id)) {
			categoryRepository.deleteById(id);
			return "Category deleted.";
		} else
			return "Category not found...";
	}

	/*
	@GetMapping(path = "/edit") // Map ONLY GET Requests
	public @ResponseBody String editCategory(@RequestParam int id) {
		if (categoryRepository.existsById(id)) {
			Category category = categoryRepository.findById(id).get();
			category.setName("BEARBEITET");
			categoryRepository.save(category);
			return "Category succesfully edited.";
		} else
			return "Category not found...";
	}
	*/

}